worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Get real IP from upstream proxy
    set_real_ip_from 0.0.0.0/0;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Map to exclude static files and bots from logging
    map $request_uri $loggable {
        ~*\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map|json|avif)(\?.*)?$ 0;
        default 1;
    }

    # Map to exclude bot 403s from logging
    map $is_bot $loggable_final {
        1 0;  # Don't log bot requests
        default $loggable;  # Use regular loggable logic
    }

    # Block ALL bots - any user agent containing 'bot' or 'crawl'
    map $http_user_agent $is_bot {
        default 0;
        ~*bot 1;
        ~*crawl 1;
        ~*spider 1;
        ~*slurp 1;
        ~*scrape 1;
        ~*GoogleOther 1;
    }

    # Check if request has campaign context (cid parameter or cid-XXX pattern)
    map $request_uri $has_campaign_context {
        default 0;
        ~*[?&]cid= 1;                    # Has ?cid= or &cid= query parameter
        "~*cid-[^/?&]{3,}" 1;            # Has cid-XXX with at least 3 chars in path
    }

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    keepalive_requests 1000;
    reset_timedout_connection on;
    client_body_timeout 10;
    send_timeout 2;

    # Buffer optimizations
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    client_max_body_size 8m;
    client_body_buffer_size 128k;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting for decision endpoint
    # limit_req_zone $binary_remote_addr zone=decision:10m rate=10r/s;
    # limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;

    # Hash optimizations
    server_names_hash_bucket_size 64;
    variables_hash_max_size 2048;

    server {
        listen 80;
        server_name localhost;
        root /var/www/html;
        index index.php index.html;

        # Conditional logging - exclude static files and bot 403s
        access_log /var/log/nginx/access.log combined if=$loggable_final;
        error_log /var/log/nginx/error.log;

        # Block ALL bots immediately - return 403 Forbidden
        if ($is_bot) {
            return 403 "Bot access is not allowed";
        }

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-Robots-Tag "noindex, nofollow, noarchive, nosnippet" always;

        # Serve robots.txt (will still return 403 to bots due to earlier check)
        location = /robots.txt {
            add_header X-Robots-Tag "noindex, nofollow, noarchive, nosnippet" always;
            try_files $uri =404;
        }

        # Main location for initial decision making
        location = /index.php {
            # Rate limiting for decision endpoint
            # limit_req zone=decision burst=20 nodelay;

            # Check if user already has a variant assigned
            if ($cookie_campaign_variant) {
                # Redirect to assigned variant using internal redirect
                rewrite ^/index.php$ /internal-variant/$cookie_campaign_variant/index.php last;
            }

            # If no variant assigned, process through PHP decision maker
            fastcgi_pass unix:/var/run/php/php-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;

            # FastCGI optimizations
            fastcgi_buffering on;
            fastcgi_buffer_size 4k;
            fastcgi_buffers 8 4k;
            fastcgi_busy_buffers_size 8k;
            fastcgi_temp_file_write_size 8k;

            # Important: Allow x-accel-redirect headers
            fastcgi_param HTTP_X_ACCEL_REDIRECT "";
        }

        # Internal location for serving variant content
        location /internal-variant/ {
            internal;

            # Debug logging
            error_log /var/log/nginx/debug.log debug;

            # Add debug headers
            add_header X-Debug-Internal-Path "$uri" always;
            add_header X-Debug-Document-Root "$document_root" always;

            # Remove the /internal-variant/ prefix and serve from variants/
            alias /var/www/html/variants/;

            # Set proper MIME types for static files
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map|avif)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary Accept-Encoding;
                access_log off;  # Disable logging for static files
                try_files $uri =404;
            }

            # Handle PHP files in variants
            location ~ \.php$ {
                fastcgi_pass unix:/var/run/php/php-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $request_filename;
                include fastcgi_params;
            }

            # Try to serve the file directly, then try with index files
            try_files $uri $uri/ $uri/index.html $uri/index.php @not_found;
        }

        # Handle all other requests - check for variant assignment
        location / {
            # Rate limiting for general requests
            # limit_req zone=general burst=50 nodelay;

            # Create a composite condition variable
            set $routing_decision "";

            # NO CAMPAIGN CONTEXT scenarios
            # 1. No campaign context + has cookie -> serve variant
            if ($has_campaign_context = 0) {
                set $routing_decision "no_campaign";
            }
            if ($cookie_campaign_variant != "") {
                set $routing_decision "${routing_decision}_has_cookie";
            }
            if ($routing_decision = "no_campaign_has_cookie") {
                rewrite ^(.*)$ /internal-variant/$cookie_campaign_variant$1 last;
            }

            # 2. No campaign context + no cookie -> serve default
            if ($routing_decision = "no_campaign") {
                rewrite ^(.*)$ /internal-variant/default$1 last;
            }

            # HAS CAMPAIGN CONTEXT scenarios
            # 1. Has campaign context + has cookie -> serve variant
            set $campaign_with_cookie 0;
            if ($has_campaign_context = 1) {
                set $campaign_with_cookie "${has_campaign_context}";
            }
            if ($cookie_campaign_variant != "") {
                set $campaign_with_cookie "${campaign_with_cookie}_cookie";
            }
            if ($campaign_with_cookie = "1_cookie") {
                rewrite ^(.*)$ /internal-variant/$cookie_campaign_variant$1 last;
            }

            # 2. Has campaign context + no cookie -> go to Adspect
            if ($has_campaign_context = 1) {
                rewrite ^(.*)$ /index.php last;
            }

            try_files $uri $uri/ =404;
        }

        # Handle PHP files for variant users
        location ~ \.php$ {
            # If user has variant assigned, serve from variant folder
            if ($cookie_campaign_variant) {
                rewrite ^(.*)$ /internal-variant/$cookie_campaign_variant$1 last;
            }

            # Otherwise process normally
            fastcgi_pass unix:/var/run/php/php-fpm.sock;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }

        # Deny direct access to variants folder
        location ~ ^/variants/ {
            deny all;
            return 404;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
        }

        location ~ \.(htaccess|htpasswd|ini|log|sh|inc|bak)$ {
            deny all;
        }

        # Fallback for not found files
        location @not_found {
            return 404 "Variant file not found";
        }
    }
}